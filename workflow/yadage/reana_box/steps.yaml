ntuple:
  process:
    process_type: string-interpolated-cmd
    cmd: echo "Input files; {input_file} \n GT; {global_tag}" > {output_file}
  environment:
    environment_type: localproc-env
  publisher:
    publisher_type: interpolated-pub
    publish:
      ntuple_file: '{output_file}'

initialise:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: |
      cp {input_file} {output_file}
  publisher:
    publisher_type: fromyaml-pub
    yamlfile: 'files.yml'
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4

merge_ntuple:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: |
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."

      files="{input_file}"

      for file in {input_file}; do
        n=0
        until [ "$n" -ge 5 ]; do
          ls $file
          root -q -b $file
          if [ $? -eq 255 ]; then
            break
          fi
          n=$(($n+1)) 
          sleep 10
        done

        if [ "$n" == 5 ]; then
          echo "!!!!!!! $file corrupted! Removing it from the list. !!!!!!!"
          echo -n "$files ==> "
          files=$(echo $files | sed s@"$file"@@)
          echo $files
        fi
      done

      hadd -k -f -n 5 {output_file} $files
      if [ $? -ne 0 ]; then
        echo "Returned zero even though non-zero exit status"
        return 0
      fi
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      merged: '{output_file}'

create_PU_dist:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."

      cp $HOME/JetMETAnalysis/workflow/HTCondor/Files/MyMCPileupHistogram.root {PU_dist_mc} 
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      PU_dist_mc: '{PU_dist_mc}'

list_lumi:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: |
      
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp $HOME/helper/ListRunLumi.cpp .
      cp $HOME/helper/makefile .
      make RunListRunLumi

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')

      files="{input_file}"

      for file in {input_file}; do
        n=0
        until [ "$n" -ge 5 ]; do
          ls $file
          root -q -b $file
          if [ $? -eq 255 ]; then
            break
          fi
          n=$(($n+1)) 
          sleep 10
        done

        if [ "$n" == 5 ]; then
          echo "!!!!!!! $file corrupted! Removing it from the list. !!!!!!!"
          echo -n "$files ==> "
          files=$(echo $files | sed s@"$file"@@)
          echo $files
        fi
      done
      
      for i in $files; do
        ./RunListRunLumi $i $algorithm >> {output_file};
      done
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      lumi_file: '{output_file}'

match_lumi:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: |
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp $HOME/helper/MatchFiles.cpp .
      cp $HOME/helper/PrepareMatching.cpp .
      cp $HOME/helper/makefile .
      make RunMatchFiles RunPrepareMatching

      cat {lumi_file_noPU} {lumi_file_PU} | ./RunMatchFiles > MatchedFiles
      echo 'MatchedFiles:' > {output_file}
      ./RunPrepareMatching MatchedFiles {batch_size} >> {output_file}
  publisher:
    publisher_type: fromyaml-pub
    yamlfile: 'Matchedfiles.yml'
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4

initialise2:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: |
      cp $HOME/helper/Matchedfiles.yml {output_file}
  publisher:
    publisher_type: fromyaml-pub
    yamlfile: 'Matchedfiles.yml'
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4

match_jets:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: | 
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp $HOME/JetMETAnalysis/workflow/HTCondor/Files/My*.root .
      cp -r $HOME/JetMETAnalysis .
      scram b

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')
      output=output_$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]').root

      j=0

      for i in {input_file}; do
        read -r NoPUFile PUFile <<<$(echo $i)

        echo "No PU files: $NoPUFile"
        echo "PU files: $PUFile"

        NoPUFile=$(echo $NoPUFile | tr ':' ' ')
        PUFile=$(echo $PUFile | tr ':' ' ')

        hadd -f -k -n 5 {output_path}/NoPUFile.root $NoPUFile
        hadd -f -k -n 5 {output_path}/PUFile.root $PUFile

        jet_synchtest_x \
          -basepath '//' \
          -samplePU {output_path}/PUFile.root \
          -sampleNoPU {output_path}/NoPUFile.root \
          -algo1 $algorithm \
          -algo2 $algorithm \
          -iftest false \
          -maxEvts 10000000 \
          -ApplyJEC false \
          -outputPath $PWD \
          -npvRhoNpuBinWidth 10 \
          -NBinsNpvRhoNpu 6 \
          -MCPUReWeighting {PU_dist_mc} \
          -DataPUReWeighting `pwd`/MyDataPileupHistogram.root \
          -useweight true \
          -nrefmax 3 \
          -doNotSave true

        rm {output_path}/NoPUFile.root
        rm {output_path}/PUFile.root

        output_workspace=output_$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')_$(($j+0)).root
        cp $output {output_path}/$output_workspace

        j=$(($j+1))
      done

      echo "Output_files:" > {output_file}
      for i in $(ls $REANA_WORKSPACE/output_*); do
        echo "  - \"\$REANA_WORKSPACE/\$i\"" >> {output_file}
      done
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: fromyaml-pub
    yamlfile: 'Output_files.yml'

compute_l1:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: | 
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp $HOME/helper/deriveL1.C .
      cp -r $HOME/JetMETAnalysis .
      scram b

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')
      merge=output_$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]').root

      hadd -k -f -n 5 {output_path}/$merge {input_file}

      jet_synchfit_x \
        -inputDir {output_path} \
        -outputDir {output_path} \
        -algo1 $algorithm \
        -algo2 $algorithm \
        -highPU false \
        -useNPU false \
        -functionType standard \
        -era {era}PreDeriveL1

      root -b -q -l `printf "deriveL1.C+(\"{output_path}\",\"$algorithm\",\"{algo}{cone_size}{jet_type}\",\"{era}\")"`
      mv *.txt {output_path}
      rm {output_path}/*.root
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      l1_corr: '{output_file}'

apply_l1:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp {l1_corr} .
      cp -r $HOME/JetMETAnalysis .
      scram b

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')

      hadd -k -f -n 5 {output_merged} {input_file}

      jet_apply_jec_x \
        -input {output_merged} \
        -output {output_file} \
        -jecpath $PWD \
        -era {era} \
        -levels 1 \
        -algs $algorithm \
        -L1FastJet true \
        -saveitree false
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      applied_l1: '{output_file}'
      merged: '{output_merged}'

histogram:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp $HOME/JetMETAnalysis/workflow/HTCondor/Files/My*.root .
      cp $HOME/JetMETAnalysis/JetAnalyzers/config/jra_dr_finebinning.config jra.config
      cp -r $HOME/JetMETAnalysis .
      scram b

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')l1:0.2

      jet_response_analyzer_x jra.config \
        -input {input_file} \
        -nbinsabsrsp 0 \
        -nbinsetarsp 0 \
        -nbinsphirsp 0 \
        -nbinsrelrsp 200 \
        -doflavor false \
        -flavorDefinition phys \
        -MCPUReWeighting {PU_dist_mc} \
        -MCPUHistoName pileup \
        -DataPUReWeighting MyDataPileupHistogram.root \
        -DataPUHistoName pileup \
        -output {output_file} \
        -useweight true \
        -nrefmax 3 \
        -algs $algorithm \
        -relrspmin 0.0 \
        -relrspmax 2.0
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      histo: '{output_file}'

compute_l2l3:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp -r $HOME/JetMETAnalysis .
      scram b

      hadd -k -f -n 5 {output_path}/Merged.root {input_file}

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')l1

      jet_l2_correction_x \
        -input {output_path}/Merged.root \
        -algs $algorithm \
        -era {era} \
        -output l2.root \
        -outputDir {output_path}/ \
        -makeCanvasVariable AbsCorVsJetPt:JetEta \
        -l2l3 true \
        -batch true \
        -histMet median \
        -delphes false \
        -maxFitIter 30 \
        -l2calofit DynamicMin \
        -l2pffit splineAkima \
        -ptclip 20

      cp {output_path}/*.txt {output_path}/{era}_L2Relative_{algo}{cone_size}{jet_type}.txt
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      l2l3_corr: '{output_file}'

closure:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp $HOME/JetMETAnalysis/workflow/HTCondor/Files/My*.root .
      cp {l1_corr} .
      cp {l2l3_corr} .
      cp -r $HOME/JetMETAnalysis .
      scram b

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')

      inputFileNamePath=$(echo {input_file} | rev | cut -d"/" -f2-  | rev)
      inputFileName=$(echo {input_file} | rev | cut -d"/" -f1  | rev | cut -d"." -f1)

      jet_correction_analyzer_x \
        -inputFilename $inputFileName \
        -inputFilePath $inputFileNamePath \
        -outputDir {output_path}/ \
        -path $PWD \
        -era {era} \
        -levels 1 2 \
        -useweight true \
        -algs $algorithm \
        -drmax 0.2 \
        -evtmax 0 \
        -nbinsrelrsp 200 \
        -relrspmin 0.0 \
        -relrspmax 2.0 \
        -MCPUReWeighting {PU_dist_mc} \
        -DataPUReWeighting MyDataPileupHistogram.root \
        -nrefmax 3

      rm {input_file}
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      closure: '{output_file}'

plot_closure:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      mkdir -p {output_path}
      echo "Setting up CMSSW_10_3_3"
      source /opt/cms/cmsset_default.sh
      scramv1 project CMSSW CMSSW_10_3_3
      cd CMSSW_10_3_3/src
      eval `scramv1 runtime -sh`
      echo "CMSSW should now be available."
      cp -r $HOME/JetMETAnalysis .
      scram b
      
      hadd -k -f -n 5 {output_path}/Merged.root {input_file}

      jet_draw_closure_x \
        -doPt true \
        -doEta true \
        -path {output_path} \
        -filename Merged \
        -basepath {output_path} \
        -histMet median \
        -outputDir {output_path} \
        -draw_guidelines true \
        -doRatioPt false \
        -doRatioEta false
  environment:
    environment_type: docker-encapsulated
    image: alintulu/jec
    imagetag: box-slc6-v4
  publisher:
    publisher_type: interpolated-pub
    publish:
      closure: '{output_file}'
