stages:
  - name: produce_ntuple
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file_PU: ["/home/cmsusr/input/JRA00.root", "/home/cmsusr/input/JRA0180.root"] 
        input_file_noPU: ["/home/cmsusr/input/JRA58.root", "/home/cmsusr/input/JRA99.root"]
        algo: 'ak4pf'
      workflow: {$ref: workflow_ntuple.yaml}

  - name: match_lumi
    dependencies: [produce_ntuple]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        lumi_file_PU: {stages: 'produce_ntuple[*].list_lumi_PU', output: lumi_file}
        lumi_file_noPU: {stages: 'produce_ntuple[*].list_lumi_noPU', output: lumi_file}
        output_file: '{workdir}/Matchedfiles.yml'
      step: {$ref: steps.yaml#/match_lumi}
        
  - name: match_jets
    dependencies: [match_lumi]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        output_path: '{workdir}'
        input_file: {stages: 'match_lumi', output: MatchedFiles, unwrap: true}
        output_file: '{workdir}/output_ak4pf.root'
        algo1: 'ak4pf'
        algo2: 'ak4pf'
      scatter:
        method: zip
        parameters: [input_file]
      step: {$ref: steps.yaml#/match_jets}

  - name: compute_l1
    dependencies: [match_jets]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file: {stages: 'match_jets', output: matched_file}
        output_path: '{workdir}'
        output_file: '{workdir}/ParallelMC_L1FastJet_AK4PF.txt'
        algo1: 'ak4pf'
        algo2: 'ak4pf'
        era: 'ParallelMCPreDeriveL1'
      step: {$ref: steps.yaml#/compute_l1}

  - name: higher_level
    dependencies: [compute_l1]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        l1_corr: {stages: 'compute_l1', output: l1_corr}
        input_file: ["/home/cmsusr/input/JRA00.root", "/home/cmsusr/input/JRA0180.root"]
        batchsize: 2
      scatter:
        method: zip
        parameters: [input_file]
      workflow: {$ref: workflow_higher_level.yaml}

  - name: compute_l2l3
    dependencies: [higher_level]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file: {stages: 'higher_level.[*].histogram', output: histo}
        output_path: '{workdir}'
        output_file: '{workdir}/ParallelMC_L2Relative_AK4PF.txt'
        algs: 'ak4pf'
        algsCAP: 'AK4PF'
        era: 'ParallelMC'
      step: {$ref: 'steps.yaml#/compute_l2l3'}

  - name: closure
    dependencies: [compute_l2l3]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        l1_corr: {stages: 'compute_l1', output: l1_corr}
        l2l3_corr: {stages: 'compute_l2l3', output: l2l3_corr}
        input_file: ["/home/cmsusr/input/JRA00.root", "/home/cmsusr/input/JRA0180.root"]
        output_path: '{workdir}'
        output_file: '{workdir}/Closure_ak4pf.root'
        algs: 'ak4pf'
        era: 'ParallelMC'
      batchsize: 2
      scatter:
        method: zip
        parameters: [input_file]
      step: {$ref: 'steps.yaml#/closure'}

  - name: plots_closure
    dependencies: [closure]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file: {stages: 'closure', output: closure}
        output_path: '{workdir}'
        output_file: '{workdir}/Closure_ak4pf.root'
      step: {$ref: 'steps.yaml#/plot_closure'}